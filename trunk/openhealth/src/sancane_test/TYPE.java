/*
Copyright (C) 2008-2009  Santiago Carot Nemesio
email: scarot@libresoft.es

This program is a (FLOS) free libre and open source implementation
of a multiplatform manager device written in java according to the
ISO/IEEE 11073-20601. Manager application is designed to work in 
DalvikVM over android platform.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

package sancane_test;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "TYPE", isSet = false )
    public class TYPE implements IASN1PreparedElement {
            
        @ASN1Element ( name = "intu8", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_U8 intu8 = null;
                
  
        @ASN1Element ( name = "intu16", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_U16 intu16 = null;
                
  
        @ASN1Element ( name = "intu32", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_U32 intu32 = null;
                
  
        @ASN1Element ( name = "mask", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private BITS_16 mask = null;
                
  
        @ASN1Element ( name = "inti8", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_U8 inti8 = null;
                
  
        @ASN1Element ( name = "shortDesc", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ShortDesc shortDesc = null;
                
  
        @ASN1Element ( name = "inti16", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_I16 inti16 = null;
                
  
        @ASN1Element ( name = "longDesc", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private LongDesc longDesc = null;
                
  
        @ASN1Element ( name = "inti32", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_I32 inti32 = null;
                
  
        
        public INT_U8 getIntu8 () {
            return this.intu8;
        }

        

        public void setIntu8 (INT_U8 value) {
            this.intu8 = value;
        }
        
  
        
        public INT_U16 getIntu16 () {
            return this.intu16;
        }

        

        public void setIntu16 (INT_U16 value) {
            this.intu16 = value;
        }
        
  
        
        public INT_U32 getIntu32 () {
            return this.intu32;
        }

        

        public void setIntu32 (INT_U32 value) {
            this.intu32 = value;
        }
        
  
        
        public BITS_16 getMask () {
            return this.mask;
        }

        

        public void setMask (BITS_16 value) {
            this.mask = value;
        }
        
  
        
        public INT_U8 getInti8 () {
            return this.inti8;
        }

        

        public void setInti8 (INT_U8 value) {
            this.inti8 = value;
        }
        
  
        
        public ShortDesc getShortDesc () {
            return this.shortDesc;
        }

        

        public void setShortDesc (ShortDesc value) {
            this.shortDesc = value;
        }
        
  
        
        public INT_I16 getInti16 () {
            return this.inti16;
        }

        

        public void setInti16 (INT_I16 value) {
            this.inti16 = value;
        }
        
  
        
        public LongDesc getLongDesc () {
            return this.longDesc;
        }

        

        public void setLongDesc (LongDesc value) {
            this.longDesc = value;
        }
        
  
        
        public INT_I32 getInti32 () {
            return this.inti32;
        }

        

        public void setInti32 (INT_I32 value) {
            this.inti32 = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(TYPE.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            